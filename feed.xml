<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jerry-chang975.github.io//</id><title>Miigun's blog</title><subtitle>A mechanical student who loves to program.</subtitle> <updated>2023-10-05T14:01:57+08:00</updated> <author> <name>Miigun</name> <uri>https://jerry-chang975.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://jerry-chang975.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-TW" href="https://jerry-chang975.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Miigun </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Web全端開發課程學習心得-入坑篇</title><link href="https://jerry-chang975.github.io//posts/AC-learning-tips-1/" rel="alternate" type="text/html" title="Web全端開發課程學習心得-入坑篇" /><published>2023-07-12T23:22:00+08:00</published> <updated>2023-07-13T10:05:23+08:00</updated> <id>https://jerry-chang975.github.io//posts/AC-learning-tips-1/</id> <content src="https://jerry-chang975.github.io//posts/AC-learning-tips-1/" /> <author> <name>Miigun</name> </author> <category term="Web Development" /> <summary> 離上次更新部落格已經過了 10 個多月啦（荒廢超久）！原因是這段期間，時間大部分都拿來精進自己的程式能力（當然也會耍廢打個遊戲 😂），所以就先暫時停止更新部落格。 Photo by olia danilevich on pexels 前言 這次分享的內容主要是關於網頁開發心得，近期報名了線上全端網頁開發課程，已學習一個多月，完成了第一個階段，順勢整理一下目前的學習心得與筆記，也練練撰寫 Blog 的文筆。 報名此課程的主因不外乎就是想轉職成為軟體工程師，雖然過去已經自學大概一兩年的時間了，但大多都是想學什麼就學什麼，知識點非常地零散，寫出來的程式碼品質低落、可維護性差，畢竟非本科系背景相對缺乏軟體工程學科基礎，想踏入這領域勢必要把人家學四年（甚至更久）的東西給補上。 那時剛好在 FB 上看到程式開發課程的相關資訊，是一個從入門到就業的全端網頁開發培訓機構，又在 Med... </summary> </entry> <entry><title>基因演算法介紹-概念篇</title><link href="https://jerry-chang975.github.io//posts/genetic-algorithm-introduction/" rel="alternate" type="text/html" title="基因演算法介紹-概念篇" /><published>2022-10-27T00:15:00+08:00</published> <updated>2022-10-27T00:15:00+08:00</updated> <id>https://jerry-chang975.github.io//posts/genetic-algorithm-introduction/</id> <content src="https://jerry-chang975.github.io//posts/genetic-algorithm-introduction/" /> <author> <name>Miigun</name> </author> <category term="Optimization" /> <category term="GA" /> <summary> 複習一下碩論用到的最佳化搜尋演算法… 只是個人的小小經驗，僅供參考。 基本介紹 基因演算法(Genetic Algorithm; GA)是用來解決最佳化問題的一種演算法。顧名思義，演算過程中以數學方法模仿生物各個演化的階段，而從中迭代出最適應於當前環境的個體(解)，主要流程如下，本文將以此流程逐步說明GA的運作方式。 生成第一代初始群體，由多個隨機產生的初始解(個體)組成。 計算群體內每一個體對於環境(目標解)的適應程度(fitness)。 檢查目前群體內是否已有達到目標解的個體，若未達標則進入演算法核心階段(選擇、交換及突變)。 選擇 (Selection): 在群體中根據個體的適應度，篩選要保留下來的個體(通常保留一半數量)，其餘淘汰。 交換 (Crossover): 從保留下的個體中隨機挑選兩個做為親代，倆倆之間進行... </summary> </entry> <entry><title>影像辨識-利用OpenCV進行影像處理</title><link href="https://jerry-chang975.github.io//posts/python-AI-OpenCV-1/" rel="alternate" type="text/html" title="影像辨識-利用OpenCV進行影像處理" /><published>2022-09-28T00:20:00+08:00</published> <updated>2023-07-13T10:05:23+08:00</updated> <id>https://jerry-chang975.github.io//posts/python-AI-OpenCV-1/</id> <content src="https://jerry-chang975.github.io//posts/python-AI-OpenCV-1/" /> <author> <name>Miigun</name> </author> <category term="Python" /> <category term="OpenCV" /> <summary> 最近在進行影像辨識的相關專案開發，所以記錄一下學習的過程與筆記~ 只是個人的小小經驗，僅供參考。 影像辨識 影像辨識是AI領域中最常被應用的一塊，如: 車牌辨識、人臉辨識與物件偵測等。 影像資料前處理 是影像辨識中最重要的一環，因訓練通常需要大量資料，且未處理過的圖片資料量大，會使一般DNN模型訓練時間過長、產生overfitting等等問題，所以在訓練前通常會經過圖片濾波、降維等處理。 卷積神經網路(Convolution Neural Networks; CNN)為現今影像辨識最常使用的ML模型，在輸入前幾層神經網路將二維圖片與二維過濾矩陣進行卷積，輸出一個濾波後的圖片，一個CNN模型可能會有好幾層卷積層，目的是盡可能找圖片中重要的特徵。卷積層結束後還會有池化層(pooling layer)將圖片降維、全連接層(DNN)等組成完整的CNN，後續有機會再詳細介紹... </summary> </entry> <entry><title>Python tkinter 做出簡單的視窗應用程式</title><link href="https://jerry-chang975.github.io//posts/python-tkinter-learning-1/" rel="alternate" type="text/html" title="Python tkinter 做出簡單的視窗應用程式" /><published>2022-09-03T14:47:00+08:00</published> <updated>2023-07-13T10:05:23+08:00</updated> <id>https://jerry-chang975.github.io//posts/python-tkinter-learning-1/</id> <content src="https://jerry-chang975.github.io//posts/python-tkinter-learning-1/" /> <author> <name>Miigun</name> </author> <category term="Python" /> <category term="tkinter" /> <summary> 與大家分享本人在Python開發上的筆記，只是個人的小小經驗，僅供參考。 tkinter為Python原生的視窗應用程式套件，所以只要有Python環境即可開發，不用下載其他的library。 tkinter雖然需要透過程式碼編寫介面，但還算易於使用，適合初學者開發功能較單純的使用介面。 其他Python GUI的開發模組還有PyQt, wxPython, Kivy等等，不過筆者目前只用過tkinter所以只能先分享它的用法啦~ 視窗基礎設定 首先將tkinter的模組引用import進來，簡寫為tk import tkinter as tk 建立一個tkinter的視窗物件，並且加入維持視窗運行的method win = tk.Tk() win.mainloop() # 維持視窗顯示的迴圈，沒有這行程式碼視窗無法維持顯示 執行後可以叫出一個空白視窗出來 ... </summary> </entry> <entry><title>Python 基本資料處理-list複製與排序</title><link href="https://jerry-chang975.github.io//posts/python-data-processing-1/" rel="alternate" type="text/html" title="Python 基本資料處理-list複製與排序" /><published>2022-08-29T05:33:00+08:00</published> <updated>2022-08-29T05:33:00+08:00</updated> <id>https://jerry-chang975.github.io//posts/python-data-processing-1/</id> <content src="https://jerry-chang975.github.io//posts/python-data-processing-1/" /> <author> <name>Miigun</name> </author> <category term="Python" /> <category term="data" /> <summary> 此系列跟大家分享本人在Python開發上，遇到一些特殊資料處理的方法，只是個人的小小經驗，僅供參考。 list串列的複製問題 list在Python中很常用來儲存大量資料的物件，有時候會遇到需要複製list的問題，會希望複製後的新list不會被原本的list影響。 例如: 下方程式碼執行結果，b_list記憶體位址指向a_list，所以當a_list元素改變時，b_list也會跟隨改變。 a_list = [[1,2,3], 3, 3, 1] b_list = a_list # 此行是將b_list變數指向a_list的位址 a_list[0][1] = 0 # 當a_list內元素改變時，b_list也會跟著改變 #result # a_list = [[1,0,3], 3, 3, 1] # b_list = [[1,0,3], 3, 3,... </summary> </entry> </feed>
